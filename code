Skip to content
This repository
Search
Pull requests
Issues
Gist
 @godisboy0
 Sign out
 Unwatch 1
  Star 0
  Fork 0 godisboy0/my_caculator
 Code  Issues 0  Pull requests 0  Projects 0  Wiki  Pulse  Graphs  Settings
Branch: master Find file Copy pathmy_caculator/code
7fba192  just now
@godisboy0 godisboy0 Update code
1 contributor
RawBlameHistory     
427 lines (377 sloc)  13.8 KB
//该类目前理论上可以添加任意双目运算符，只要合理设置级数（degree）即可
//但该类目前还不能处理单目运算符，比如！等，需要单独加上
//能想到的单目运算符除了！好像也没有其他的了哦

#include<iostream>
#include<string>
#include<sstream>
#include<stack>
#include<iomanip>
#include<math.h>

using std::cout;
using std::endl;
using std::cin;
using std::string;
using std::stack;

class caculator {
	friend std::ostream& operator << (std::ostream &os, caculator &ca);//输出答案
	friend std::istream& operator >> (std::istream &is, caculator &ca);//输入表达式
private:

	string expression;//用来储存表达式
					  /*stack<char> opera;//用来储存数值，目前我们只接受加减乘除取余和指数运算，即+ - * / % ^这6个操作符
					  //stack<int> num1;//当未设置小数点后位数时，默认所有的数字为整数，如果遇到小数点，解析但以int压栈
					  stack<double> num2;//当设置了小数点后位数时，默认所有的数字为double*/
	int caculated = NO;//如果计算过了，该值置1，直接输出结果，不然计算之,如果计算器任何位置出现error，则置error
	int ppp = 0;//这个用来统计括号的数量，每遇到一个前括号加1，每遇到一个后括号减一，如果最终不等于0，说明不匹配

	unsigned weishu = 0;//输出值在小数点后的精确位数，默认为0，也就是默认输入是整型
	static string degree1;//用来储存加减符号，优先级为1
	static string degree2;//用来储存乘除符号，优先级为2
	static string degree3;//用来储存指数符号，优先级为3
	static string oper;//储存所有符号，用于isopera函数

	static const int YES = 0;//这几个是给caculated的值
	static const int NO = 1;
	static const int ERROR = 2;
	static const int SETP = 4;//这个表达式是用来设置位数的，即以e开头
	static const int DIVES_BY_0 = 8;
	static const int TOO_MANY_NUMBER = 16;
	static const int TOO_MANY_OPERAS = 32;
	static const int WRONG_NUM = 64;//例如两个小数点
	static const int NOT_INT = 128;//求余但是并非整数
	static const int WRONG_PARE = 256;//括号不配对
	static const int ILLEGAL_CHAR = 512;//不能识别的字符
	static const int ILLEGAL_PRE = 1024;//设置位数时有非法输入

	static string number;//用来鉴定一个字符是否是数字
						 //int answer1;
	double answer2;
	bool isnum(const char c) { return number.find(c) != string::npos; };
	bool isoper(const char c) { return oper.find(c) != string::npos; };
	int degree(const char c) {
		if (degree1.find(c) != string::npos)
			return 1;
		else if (degree2.find(c) != string::npos)
			return 2;
		else if (degree3.find(c) != string::npos)
			return 3;
		else return -1;//其实这一步应该永远用不到，因为在调用该函数之前，我们就已经用isoper判定了结果了
	}
	double getnum(string::iterator &it);//传入一个string的迭代器，返回解析完之后的数字，同时迭代器指向数字后的下一位	
	int getint(string::iterator &it);//传入一个string的迭代器，返回解析完之后的数字，但不处理小数点，同时迭代器指向数字后的下一位
	double caculate_mt(string::iterator &it);
	double caculator::caculate(double op1, double op2, char op);
	bool isint(double a);
	double Pop_num(stack<double> &num2);
	char Pop_oper(stack<char> &opera);
public:
	double caculate();
	caculator() = default;
	explicit caculator(const string &express) :expression(express) {};//用一个字符串来初始化类,这是explicit的
	caculator &operator = (const string &express) { this->expression = express; caculated = NO; ppp = 0; return *this; };
	string get_expression() const { return expression; };
};

string caculator::degree1("+-");
string caculator::degree2("*/%");
string caculator::degree3("^");
string caculator::number("1234567890.");//无论是否设置小数点后输出位数，我们都解析，只是最终输出时对结果予以截断
string caculator::oper = caculator::degree1 + caculator::degree2 + caculator::degree3;//这里用加号是为了避免扩展时忘记更改而出错


bool caculator::isint(double a) {

	std::ostringstream oss;
	oss << a;
	return oss.str().find('.') == string::npos;

}

std::ostream& operator << (std::ostream &os, caculator &ca) {

	if (ca.caculated == caculator::NO)
		ca.answer2 = ca.caculate();
	if (ca.ppp)
		ca.caculated |= caculator::ERROR | caculator::WRONG_PARE;
	if (ca.caculated & caculator::ERROR) {
		//理论上这一段也可以switch(caculated & ~ERROR & ~NO & ~SETP)，case用各个错误变量名
		if (ca.caculated & caculator::DIVES_BY_0)
			os << "Diverse by zero";
		else if (ca.caculated & caculator::WRONG_NUM)
			os << "Wrong number";
		else if (ca.caculated & caculator::TOO_MANY_NUMBER)
			os << "Two many numbers";
		else if (ca.caculated & caculator::TOO_MANY_OPERAS)
			os << "Two many operators";
		else if (ca.caculated & caculator::NOT_INT)
			os << "Only int for mod operator";
		else if (ca.caculated & caculator::WRONG_PARE)
			os << "Parentheses not match";
		else if (ca.caculated & caculator::ILLEGAL_CHAR)
			os << "Illegal characters";
		else if (ca.caculated & caculator::ILLEGAL_PRE)
			os << "Wrong input, presion remains " << ca.weishu;
	}
	else {
		if (ca.caculated == caculator::YES) {
			if (ca.weishu != 0)
				os << std::setiosflags(std::ios::fixed)<<std::setprecision(ca.weishu) << ca.answer2;
			else os << static_cast<int>(ca.answer2);
		}
		else os << "presion settled to " << ca.weishu;
	}
	return os;
}

std::istream& operator >> (std::istream &is, caculator &ca) {

	std::getline(is, ca.expression);//要用getline而不能用is>>，因为可能会有空格
	ca.caculated = caculator::NO;//如果重新输入了表达式，当然该值要重置
	ca.ppp = 0;
	return is;

}

double caculator::caculate() {

	auto it = expression.begin();
	while (*it == ' ')//先把空格跳过
		++it;
	if (*it == 'e') {//e之后的数字将被认为是设置小数点位数
		++it;
		weishu = getint(it);
		caculated |= SETP;
		while (it != expression.end() && *it != ' ')//再跳过数字后的空格
			++it;
		if (it != expression.end()) {//跳过空格后要是还有内容，就说明输入错误
			caculated |= ERROR | ILLEGAL_PRE;
		}
		return 0;
	}
	return caculate_mt(it);

}

double caculator::caculate(double op1, double op2, char op) {

	if (caculated & ERROR)
		return 0.0;

	if (op2 == 0 && (op == '/' || op == '%')) {//如果第二个操作数为0还要进行除法或者取余运算，直接错误
		caculated |= ERROR | DIVES_BY_0;//如果有兴趣可以对ERROR进行细分，所以我确实这么做了
		return 0.0;
	}

	switch (op) {
	case '+':
		return op1 + op2;
		break;//呵呵，毫无必要的break，我为什么要写个不停呢，为了信仰= =
	case '-':
		return op1 - op2;
		break;
	case '*':
		return op1 * op2;
		break;
	case '/':
		return op1 / op2; //不需要处理错误，因为调用该函数之前已处理过了
		break;
	case'%':
		if (isint(op1) && isint(op2))
			return static_cast<int>(op1) % static_cast<int>(op2);
		else {
			caculated |= ERROR | NOT_INT;
			return 0.0;
		}
		break;
	case '^':
		return pow(op1, op2);
		break;
	default:
		cout << "不可能的，之前都做过判断了" << endl;
		return 0.0;
		break;
	}
}

double caculator::Pop_num(stack<double> &num2) {
	
	double ret_num;
	if (!num2.empty()) {//栈不应当为空
		ret_num = num2.top();
		num2.pop();
		return ret_num;
	}
	else {
		caculated |= ERROR | TOO_MANY_OPERAS;
		return 0.0;
	}
}

char caculator::Pop_oper(stack<char> &opera) {

	char ret_op;
	if (!opera.empty()) {
		ret_op = opera.top();
		opera.pop();
		return ret_op;
	}
	else {
		caculated |= ERROR | TOO_MANY_NUMBER;
		return 0;
	}

}

double caculator::caculate_mt(string::iterator &it) {

	stack<char> opera;//用来储存数值，目前我们只接受加减乘除取余和指数运算，即+ - * / % ^这6个操作符
	stack<double> num2;//当设置了小数点后位数时，默认所有的数字为double

	if (caculated & ERROR) {//已经出错，不再继续计算
		return 0.0;
	}

	static const int NUMBER = 1;
	static const int OPER = 0;

	int last_char = OPER;//最后一个字符是操作数的话，我们就可以将正负号与加减号分开了。
	int last_degree = 0;//最后一个操作符的级别，如果当前的级别<=last_degree，那么就可以弹出运算符来运算了
	double op_num1;//操作数1
	double op_num2;//操作数2
	char op = '\0';//操作符


	while (it != expression.end()) {
		if (*it == ' ') {
			++it;
			continue;
		}
		if (isnum(*it)) {
			num2.push(getnum(it));
			last_char = NUMBER;
		}
		else if (isoper(*it)) {
			if (last_char == NUMBER) {//上一个处理的字符是数字，那么就可以放心地直接把现在的这个字符当做加减，而不是正负号
				op = *it;
				last_char = OPER;
				if (degree(*it) <= last_degree) {//如果当前处理的操作符优先级比之前的要小或者相等，那么意味着可以弹栈做操作了
					op_num2 = Pop_num(num2);
					op_num1 = Pop_num(num2);
					op = Pop_oper(opera);
					num2.push(caculate(op_num1, op_num2, op));//算完了再压回去
					if (caculated & ERROR)
						return 0.0;
					if (!opera.empty()) {
						last_degree = degree(opera.top());//这是对的，毋庸置疑
					}
					else {
						last_degree = 0;
					}
					opera.push(*it);//等处理完上一个运算符之后，再把这个运算符压栈
				}
				else {//当前处理的操作符优先级比之前的还大，那么不能处理，只能继续压栈
					last_degree = degree(*it);
					opera.push(*it);
				}
				++it;//差点忘了
			}
			else if (*it == '+' || *it == '-') {//上一个处理的字符已经是字符了，那么就可以把这个符号认为是正负号
				num2.push(getnum(it));//连续出现+号的错误交给getnum去发现和处理
				if (caculated & ERROR) return 0;
				last_char = NUMBER;
			}
			else {
				caculated |= ERROR| TOO_MANY_OPERAS;//又出错了,在操作符后紧接着出现了操作符
				return 0.0;
			}
		}
		else if (*it == '(') {//如果出现括号，就递归处理
			++ppp;
			++it;//先递增迭代器，避免括号无限递归
			num2.push(caculate_mt(it));
			if (caculated & ERROR) return 0;
			last_char = NUMBER;//遇到括号时，我们递归处理了括号，返回一个数值，所以我们把括号视为一个操作数
		}
		else if (*it == ')') {//遇到了右括号，理论上括号应该处理完了，但这里有个问题，如何处理没有左括号的右括号，和没有右括号的左括号
			if (ppp == 0) {//从来没遇到前括号，你给我来个后括号？
				caculated |= ERROR | WRONG_PARE;
				return 0.0;
			}
			//遇到后括号相当于表达式解析结束，所以我们再进行一次计算，然后返回
			//因为递归程序用的是同一个数字和操作符栈，不知道会不会造成栈混乱，初步感觉不会，先试试吧，不行搞成本地变量
			--ppp;
			++it;//跳过后括号
			break;//直接跳出循环，认为已经结束了
		}
		else if (*it == '\n') {//理论上不应该记录回车
			cout << "WTF,An \\n was detected" << endl;
			return 0.0;
		}
		else {//既不是数字，也不是操作符，也不是括号，那就只能出错了
			caculated |= ERROR | ILLEGAL_CHAR;
			return 0.0;
		}
	}
	//理论上，因为是中缀表达式，当表达式见底到达结尾时，应当还有一个符号没有处理
	//当然，此时还有一个可能，就是最后的一个操作符刚好就是优先级最大的，这样也会导致循环退出但并未计算

	if (caculated &ERROR)
		return 0.0;

	if (last_char != NUMBER && op == '\0') {//没有处理数字，也没有遇到操作符，可见是个空输入
		return 0.0;
		//也不见得是错
	}
	else if (last_char != NUMBER && op != '\0') {//没有数字但是却有操作符？错误了呗
		caculated |= ERROR | TOO_MANY_OPERAS;
		return 0.0;
	}
	else if (last_char == NUMBER && op == '\0') {//只有数字没有操作符
		if (num2.size() == 1) {
			caculated = YES;
			return num2.top();
		}
		else {
			caculated |= ERROR | TOO_MANY_NUMBER;
			return 0.0;
		}
	}
	else {
		while (!opera.empty()) {
			//如果最后的一个操作符刚好就是优先级最大的，这样也会导致循环退出但并未计算，应当处理这种情况,因此用了while
			op_num2 = Pop_num(num2);
			op_num1 = Pop_num(num2);
			op = Pop_oper(opera);
			num2.push(caculate(op_num1, op_num2, op));//算完了再压回去
			if (caculated & ERROR)
				return 0.0;
		}
		double ret_num = num2.top();
		num2.pop();
		if (num2.empty() && opera.empty() && !(caculated & ERROR))
			caculated = YES;
		else {
			if (!num2.empty())
				caculated |= ERROR | TOO_MANY_NUMBER;
			if (!opera.empty())
				caculated |= ERROR | TOO_MANY_OPERAS;
		}
		return ret_num;
	}

}

int caculator::getint(string::iterator &it) {

	string temp;
	while (it != expression.end() && *it == ' ')
		++it;
	while (it != expression.end() && isnum(*it)) {
		temp += *it;//也可以用find_first_not_of
		++it;
	}
	if (temp.find('.') != string::npos || temp == "") {//小数点和带正负号的输入将被直接置错
		caculated |= ERROR | ILLEGAL_PRE;
		return weishu;
	}

	return std::stoi(temp);

}

double caculator::getnum(string::iterator &it) {

	int dot = 0;
	string temp;
	int fuhao = 1;
	if (*it == '+') {
		++it;
		fuhao = 1;
	}
	else if (*it == '-') {
		++it;
		fuhao = -1;
	}
	while (it != expression.end() && isnum(*it)) {
		if (*it == '.')
			++dot;
		temp += *it;
		++it;
	}
	if (dot >= 2)
		caculated |= WRONG_NUM | ERROR;
	if (temp.find_first_of(number) == string::npos) {
		caculated |= ERROR | WRONG_NUM;
		return 0.0;
	}
	return fuhao * std::stod(temp);


}

int _tmain(int argc, _TCHAR* argv[])
{

	caculator exp;
	cout << "可以解析+ - * / % ^ 和括号，默认输出为整型" << endl;
	cout << "当输入 \"e+空格+数字\"时，将设置输出数字小数点后的位数" << endl;
	cout << "输入Ctrl+Z来退出" << endl;
	while (cin >> exp) {
		cout << exp << endl;
	}
	return 0;
}
Contact GitHub API Training Shop Blog About
© 2017 GitHub, Inc. Terms Privacy Security Status Help
